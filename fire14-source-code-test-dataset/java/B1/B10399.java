/*ProblemDo you ever become frustrated with television because you keep seeing the same things, recycled over and over again? Well I personally don't care about television, but I do sometimes feel that way about numbers.Let's say a pair of distinct positive integers (n, m) is recycled if you can obtain m by moving some digits from the back of n to the front without changing their order. For example, (12345, 34512) is a recycled pair since you can obtain 34512 by moving 345 from the end of 12345 to the front. Note that n and m must have the same number of digits in order to be a recycled pair. Neither n nor m can have leading zeros.Given integers A and B with the same number of digits and no leading zeros, how many distinct recycled pairs (n, m) are there with A = n < m = B?InputThe first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of a single line containing the integers A and B.OutputFor each test case, output one line containing "Case #x: y", where x is the case number (starting from 1), and y is the number of recycled pairs (n, m) with A = n < m = B.Limits1 = T = 50.A and B have the same number of digits.Small dataset1 = A = B = 1000.Large dataset1 = A = B = 2000000.SampleInput  	Output  41 910 40100 5001111 2222Case #1: 0Case #2: 3Case #3: 156Case #4: 287*/import java.io.*;import java.util.*;import java.util.logging.Level;import java.util.logging.Logger;public class RecycledNumbers{     BufferedReader read;     BufferedWriter write;    public static void main(String args[])    {        try {            new RecycledNumbers().init("C-small-attempt0");        } catch (Exception ex) {            //Logger.getLogger(RecycledNumbers.class.getName()).log(Level.SEVERE, null, ex);			System.out.println("Error" + ex);			        }    }     void init(String name) throws Exception    {        read=new BufferedReader(new FileReader(new File(name+".in")));        write=new BufferedWriter(new FileWriter(new File(name+".out")));        		String x="";                    try {                   x = read.readLine();                   int nos = Integer.parseInt(x.trim());                   for(int z=0;z<nos;z++)                      {					                                        x = read.readLine();								  String ss[]=x.split(" ");								 // int[] anb = new int[ss.length];								   int a =  Integer.parseInt(ss[0].trim());								   int b =  Integer.parseInt(ss[1].trim());;								   //System.out.println(a+"  "+b );								   //a=10;b=40;									  int count=0;								   for(int i=a;i<=b;i++)								    {									  String sub="",s1="";									  String s= "" + i;									  //System.out.println("....   "+s);									  int len = s.length();									  ArrayList<Integer> ar=new ArrayList<Integer>();									  for(int j=0;j<len;j++)										{									      String c = ""+(s.charAt(len-1));										  // System.out.print("....   "+c);										  sub = s.substring(0,len-1);										   //System.out.print("....   "+sub);										//  s1 = c + sub;										  s = c + sub;										 //System.out.print("....   "+s);										  if(s.charAt(0)!='0')										   {										     int num = Integer.parseInt(s);											 if(!ar.contains(num)&&num>i && num<=b)											 {											 ar.add(num);											 //System.out.println("   i....   "+i+"...num....   "+num);											 count++;}										   }									    }									}								write.write("Case #"+(z+1)+":"+" "+count+"\n");							System.out.println("Case #"+(z+1)+":"+" "+count+"\n");					 }                				write.flush();                   write.close();                   read.close();                  // System.out.println(a+"    "+b);                              }             catch (Exception ex) {			 System.out.println("Error" + ex);                           System.exit(0);            }      }}